import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils import executor
import hashlib
import os

logging.basicConfig(level=logging.INFO)

# üîë –°—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = "8195703213:AAF792v5vuBt7LBho5feo1NlJEYpitIcKqM"


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üìí –°–ª–æ–≤–∞—Ä—å "–∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ -> –∑–∞–º–µ—Ç–∫–∞"
NOTES = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –∑–∞–º–µ—Ç–∫–∞.",
    "—Å—Å—ã–ª–∫–∏": "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\nhttps://example.com",
    "–¥–µ–ª–∞": "–°–ø–∏—Å–æ–∫ –¥–µ–ª:\n- –ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n- –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞"
}

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–∞
@dp.inline_handler()
async def inline_echo(inline_query: types.InlineQuery):
    text = inline_query.query.strip().lower()
    results = []

    if text in NOTES:
        note = NOTES[text]
        results.append(
            InlineQueryResultArticle(
                id=hashlib.md5(text.encode()).hexdigest(),
                title=f"–ó–∞–º–µ—Ç–∫–∞: {text}",
                input_message_content=InputTextMessageContent(note),
                description=note[:50]  # –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            )
        )
    elif text:  # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ, –Ω–æ –Ω–µ—Ç –∑–∞–º–µ—Ç–∫–∏
        results.append(
            InlineQueryResultArticle(
                id=hashlib.md5(text.encode()).hexdigest(),
                title="–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏",
                input_message_content=InputTextMessageContent("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            )
        )

    await inline_query.answer(results, cache_time=1)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
